HOME			= .
RANDFILE		= $ENV::HOME/.rnd
oid_section		= new_oids

####################################################################

[ new_oids ]
rdpSrv		= 1.3.6.1.4.1.311.54.1.2

####################################################################

[ ca ]
default_ca	= CBI_CA		# The default ca section

####################################################################

[ CBI_CA ]
dir		= $ENV::ROOT		# Where everything is kept
certs		= $dir/certs		# Where the issued certs are kept
crl_dir		= $dir/crl		# Where the issued crl are kept
database	= $ENV::INDEX_FILE	# database index file.
#unique_subject	= no			# Set to 'no' to allow creation of
					# several ctificates with same subject.
new_certs_dir	= $dir/newcerts		# default place for new certs.

certificate	= $dir/certs/ca.crt 	# The CA certificate
serial		= $ENV::SERIAL_FILE	# The current serial number
crlnumber	= $ENV::CRLNUM_FILE	# the current crl number
					# must be commented out to leave a V1 CRL
crl		= $dir/crl.pem 		# The current CRL
private_key	= $dir/private/ca.key	# The private key
RANDFILE	= $dir/private/.rand	# private random number file

x509_extensions	= usr_cert		# The extentions to add to the cert

# Comment out the following two lines for the "traditional"
# (and highly broken) format.
name_opt 	= ca_default		# Subject Name options
cert_opt 	= ca_default		# Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions	= crl_ext
default_days	= $ENV::DAYS		# how long to certify for

#default_days	= 3650		# how long to certify for
default_crl_days = 30			# how long before next CRL
default_md	= default		# use public key default MD
preserve	= no			# keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy		= policy_anything

# For the CA policy
[ policy_match ]
countryName		= match
stateOrProvinceName	= match
organizationName	= match
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object'
# types.
[ policy_anything ]
countryName		= optional
stateOrProvinceName	= optional
localityName		= optional
organizationName	= optional
organizationalUnitName	= optional
commonName		= supplied
emailAddress		= optional

####################################################################

[ req ]
default_bits		= $ENV::BITS
default_keyfile 	= privkey.pem
encrypt_key 		= $ENV::ENC_KEY
distinguished_name	= req_distinguished_name
attributes		= req_attributes
x509_extensions		= v3_ca	# The extentions to add to the self signed cert
string_mask 		= pkix #utf8only
req_extensions 		= v3_req # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName			= Country Name (2 letter code)
countryName_default		= $ENV::KEY_C
countryName_min			= 2
countryName_max			= 2

stateOrProvinceName		= State or Province Name (full name)
stateOrProvinceName_default	= $ENV::KEY_P

localityName			= Locality Name (eg, city)
localityName_default		= $ENV::KEY_L

0.organizationName		= Organization Name (eg, company)
0.organizationName_default	= $ENV::KEY_O

organizationalUnitName		= Organizational Unit Name (eg, section)
organizationalUnitName_default	= $ENV::KEY_OU

commonName			= Common Name (e.g. server FQDN or YOUR name)
commonName_max			= 64
commonName_default		= $ENV::KEY_CN

emailAddress			= Email Address
emailAddress_max		= 64
emailAddress_default		= $ENV::KEY_E

####################################################################

[ req_attributes ]
challengePassword		= A challenge password
challengePassword_min		= 2
challengePassword_max		= 20
unstructuredName		= An optional company name

[ usr_cert ]
basicConstraints		= CA:FALSE
nsComment			= "OpenSSL Generated Certificate"
subjectKeyIdentifier		= hash

####################################################################

[ v3_ca ]
# Selfsigned cert
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always,issuer
basicConstraints 		= CA:true
nsCertType 			= sslCA
nsComment                      	= "CA Certificate"
extendedKeyUsage                = serverAuth, clientAuth, codeSigning, emailProtection, timeStamping, msCTLSign, msEFS
keyUsage                        = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment, keyAgreement, keyCertSign, cRLSign
crlDistributionPoints		= URI:http://cbikomi.ru/certsrv/test.crl
subjectAltName                  = @alt_names

[ https_srv ]
basicConstraints 		= CA:false
#nsCertType                      = server
#nsComment                       = "HTTPS Server Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
extendedKeyUsage                = serverAuth, clientAuth
subjectAltName 			= @alt_names
keyUsage                        = digitalSignature, keyEncipherment

[alt_names]
IP = 192.168.155.90
DNS.1 = kibana.cbi
DNS.2 = teampass.cbi
DNS.3 = wiki.cbi

[ https_squid ]
basicConstraints                = CA:true
nsCertType                      = sslCA
nsComment                       = "Squid Server Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
extendedKeyUsage                = serverAuth, clientAuth
keyUsage                        = keyCertSign, cRLSign

[ ssl_srv ]
basicConstraints=CA:FALSE
nsCertType                     	= server
nsComment                      	= "SSL Server Certificate"
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid,issuer:always
extendedKeyUsage		= serverAuth
keyUsage 			= digitalSignature, keyEncipherment

[ ssl_rdp ]
basicConstraints=CA:FALSE
nsCertType                      = server
nsComment                       = "RDP server Certificate"
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid,issuer:always
extendedKeyUsage                = serverAuth, codeSigning, 1.3.6.1.4.1.311.54.1.2
keyUsage                        = digitalSignature, nonRepudiation, keyEncipherment
subjectAltName			= DNS:secretnet6-ss01.rk.local, DNS:secretnet.rk.local, IP:10.33.64.107
#crlDistributionPoints		= URI:http://cbikomi.ru/certsrv/test.crl

[ v3_req ]
# Extensions to add to a certificate request
basicConstraints 		= CA:false
keyUsage 			= nonRepudiation, digitalSignature, keyEncipherment


[ v3_ca_req ]
# Extensions to add to a certificate for interCA request
basicConstraints 		= CA:true
keyUsage 			= nonRepudiation, digitalSignature, keyEncipherment
nsCertType                	= sslCA
nsComment                      	= "Intermediate CA Certificate"


[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName=issuer:copy
authorityKeyIdentifier=keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints=CA:FALSE

# Here are some examples of the usage of nsCertType. If it is omitted
# the certificate can be used for anything *except* object signing.

# This is OK for an SSL server.
# nsCertType			= server

# For an object signing certificate this would be used.
# nsCertType = objsign

# For normal client use this is typical
# nsCertType = client, email

# and for everything including object signing:
# nsCertType = client, email, objsign

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# This will be displayed in Netscape's comment listbox.
nsComment			= "OpenSSL Generated Certificate"

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName=email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName=email:move

# Copy subject details
# issuerAltName=issuer:copy

#nsCaRevocationUrl		= http://www.domain.dom/ca-crl.pem
#nsBaseUrl
#nsRevocationUrl
#nsRenewalUrl
#nsCaPolicyUrl
#nsSslServerName

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo=critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]
default_tsa = tsa_config1	# the default TSA section

[ tsa_config1 ]
dir		= ./demoCA		# TSA root directory
serial		= $dir/tsaserial	# The current serial number (mandatory)
crypto_device	= builtin		# OpenSSL engine to use for signing
signer_cert	= $dir/tsacert.pem 	# The TSA signing certificate
certs		= $dir/cacert.pem	# Certificate chain to include in reply
signer_key	= $dir/private/tsakey.pem # The TSA private key (optional)
default_policy	= tsa_policy1		# Policy if request did not specify it
other_policies	= tsa_policy2, tsa_policy3	# acceptable policies (optional)
digests		= md5, sha1		# Acceptable message digests (mandatory)
accuracy	= secs:1, millisecs:500, microsecs:100	# (optional)
clock_precision_digits  = 0	# number of digits after dot. (optional)
ordering		= yes	# Is ordering defined for timestamps?
tsa_name		= yes	# Must the TSA name be included in the reply?
ess_cert_id_chain	= no	# Must the ESS cert id chain be included?
				# (optional, default: no)
